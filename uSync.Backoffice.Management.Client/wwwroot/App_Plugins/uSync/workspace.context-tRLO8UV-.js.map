{"version":3,"file":"workspace.context-tRLO8UV-.js","sources":["../../../assets/src/workspace/workspace.context.ts"],"sourcesContent":["import { UmbArrayState, UmbBooleanState } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\n\r\nimport { uSyncActionRepository } from \"..\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbBaseController } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { SyncActionGroup, SyncHandlerSummary, uSyncActionView } from \"../api\";\r\n\r\nimport { OpenAPI } from \"../api\";\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth'\r\n\r\n/**\r\n * @exports \r\n * @class uSyncWorkspaceActionContext\r\n * @description context for getting and seting up actions.\r\n */\r\nexport class uSyncWorkspaceContext extends UmbBaseController {\r\n\r\n    #repository: uSyncActionRepository;\r\n\r\n    constructor(host:UmbControllerHost) {\r\n        super(host);\r\n\r\n        this.provideContext(USYNC_CORE_CONTEXT_TOKEN, this);\r\n\r\n        this.#repository = new uSyncActionRepository(this);\r\n\r\n        this.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n            OpenAPI.TOKEN = () => _auth.getLatestToken();\r\n            OpenAPI.WITH_CREDENTIALS = true;\r\n            this.#loaded.setValue(true);\r\n        });\r\n    }\r\n\r\n    #loaded = new UmbBooleanState(false);\r\n    public readonly loaded = this.#loaded.asObservable();\r\n\r\n    #actions = new UmbArrayState<SyncActionGroup>([], (x) => x.key);\r\n    public readonly actions = this.#actions.asObservable();\r\n\r\n    #workingActions = new UmbArrayState<SyncHandlerSummary>([], (x) => x.name);\r\n    public readonly currentAction = this.#workingActions.asObservable();\r\n\r\n    #working = new UmbBooleanState(false);\r\n    public readonly working = this.#working.asObservable();\r\n\r\n    #completed = new UmbBooleanState(false);\r\n    public readonly completed = this.#completed.asObservable();\r\n\r\n    #results = new UmbArrayState<uSyncActionView>([], (x) => x.name);\r\n    public readonly results = this.#results.asObservable();\r\n\r\n    async getActions() {\r\n\r\n        const { data } = await this.#repository.getActions();\r\n\r\n        if (data) {           \r\n            this.#actions.setValue(data);\r\n        }\r\n    }\r\n\r\n    async performAction(group: string, key: string) {\r\n\r\n        console.log(\"Perform Action:\", group, key);\r\n\r\n        this.#working.setValue(true);\r\n        this.#completed.setValue(false);\r\n        this.#results.setValue([]);\r\n\r\n        var complete = false; \r\n        var id = '';\r\n        var step: number = 0;\r\n\r\n        do {\r\n\r\n            const {data} = await this.#repository.performAction(id, group, key, step);\r\n\r\n            if (data) {\r\n\r\n                step++;\r\n\r\n                console.log(data);\r\n\r\n                let summary = data.status ?? [];\r\n                \r\n                this.#workingActions.setValue(summary);\r\n\r\n                id = data.requestId;\r\n                complete = data.complete;\r\n\r\n                if (complete) {\r\n                    this.#results.setValue(data?.actions ?? []);\r\n                }\r\n\r\n            }\r\n            else {\r\n                complete = true;\r\n            }\r\n\r\n\r\n\r\n        } while (!complete)\r\n        \r\n\r\n        this.#completed.setValue(true);\r\n        this.#working.setValue(false);\r\n\r\n    }\r\n}\r\n\r\nexport default uSyncWorkspaceContext;\r\n\r\nexport const USYNC_CORE_CONTEXT_TOKEN = \r\n    new UmbContextToken<uSyncWorkspaceContext>(uSyncWorkspaceContext.name);"],"names":["uSyncWorkspaceContext","UmbBaseController","host","__privateAdd","_repository","_loaded","_actions","_workingActions","_working","_completed","_results","__privateSet","UmbBooleanState","__privateGet","UmbArrayState","x","USYNC_CORE_CONTEXT_TOKEN","uSyncActionRepository","UMB_AUTH_CONTEXT","_auth","OpenAPI","data","group","key","complete","id","step","summary","UmbContextToken"],"mappings":";;;;;;;;;;;;;;;;;AAgBO,MAAMA,UAA8BC,EAAkB;AAAA,EAIzD,YAAYC,GAAwB;AAChC,UAAMA,CAAI;AAHd,IAAAC,EAAA,MAAAC,GAAA;AAgBA,IAAAD,EAAA,MAAAE,GAAA;AAGA,IAAAF,EAAA,MAAAG,GAAA;AAGA,IAAAH,EAAA,MAAAI,GAAA;AAGA,IAAAJ,EAAA,MAAAK,GAAA;AAGA,IAAAL,EAAA,MAAAM,GAAA;AAGA,IAAAN,EAAA,MAAAO,GAAA;AAfU,IAAAC,EAAA,MAAAN,GAAA,IAAIO,EAAgB,EAAK,IACnB,KAAA,SAASC,EAAA,MAAKR,GAAQ,aAAa,GAEnDM,EAAA,MAAAL,GAAW,IAAIQ,EAA+B,CAAA,GAAI,CAACC,MAAMA,EAAE,GAAG,IAC9C,KAAA,UAAUF,EAAA,MAAKP,GAAS,aAAa,GAErDK,EAAA,MAAAJ,GAAkB,IAAIO,EAAkC,CAAA,GAAI,CAACC,MAAMA,EAAE,IAAI,IACzD,KAAA,gBAAgBF,EAAA,MAAKN,GAAgB,aAAa,GAEvDI,EAAA,MAAAH,GAAA,IAAII,EAAgB,EAAK,IACpB,KAAA,UAAUC,EAAA,MAAKL,GAAS,aAAa,GAExCG,EAAA,MAAAF,GAAA,IAAIG,EAAgB,EAAK,IACtB,KAAA,YAAYC,EAAA,MAAKJ,GAAW,aAAa,GAEzDE,EAAA,MAAAD,GAAW,IAAII,EAA+B,CAAA,GAAI,CAACC,MAAMA,EAAE,IAAI,IAC/C,KAAA,UAAUF,EAAA,MAAKH,GAAS,aAAa,GA3B5C,KAAA,eAAeM,GAA0B,IAAI,GAE7CL,EAAA,MAAAP,GAAc,IAAIa,EAAsB,IAAI,IAE5C,KAAA,eAAeC,GAAkB,CAACC,MAAU;AACrC,MAAAC,EAAA,QAAQ,MAAMD,EAAM,eAAe,GAC3CC,EAAQ,mBAAmB,IACtBP,EAAA,MAAAR,GAAQ,SAAS,EAAI;AAAA,IAAA,CAC7B;AAAA,EACL;AAAA,EAoBA,MAAM,aAAa;AAEf,UAAM,EAAE,MAAAgB,EAAK,IAAI,MAAMR,EAAA,MAAKT,GAAY,WAAW;AAEnD,IAAIiB,KACKR,EAAA,MAAAP,GAAS,SAASe,CAAI;AAAA,EAEnC;AAAA,EAEA,MAAM,cAAcC,GAAeC,GAAa;AAEpC,YAAA,IAAI,mBAAmBD,GAAOC,CAAG,GAEpCV,EAAA,MAAAL,GAAS,SAAS,EAAI,GACtBK,EAAA,MAAAJ,GAAW,SAAS,EAAK,GACzBI,EAAA,MAAAH,GAAS,SAAS,CAAA,CAAE;AAEzB,QAAIc,IAAW,IACXC,IAAK,IACLC,IAAe;AAEhB,OAAA;AAEO,YAAA,EAAC,MAAAL,EAAI,IAAI,MAAMR,EAAA,MAAKT,GAAY,cAAcqB,GAAIH,GAAOC,GAAKG,CAAI;AAExE,UAAIL,GAAM;AAEN,QAAAK,KAEA,QAAQ,IAAIL,CAAI;AAEZ,YAAAM,IAAUN,EAAK,UAAU;AAExB,QAAAR,EAAA,MAAAN,GAAgB,SAASoB,CAAO,GAErCF,IAAKJ,EAAK,WACVG,IAAWH,EAAK,UAEZG,KACAX,EAAA,MAAKH,GAAS,UAASW,KAAA,gBAAAA,EAAM,YAAW,CAAE,CAAA;AAAA,MAC9C;AAIW,QAAAG,IAAA;AAAA,aAKV,CAACA;AAGL,IAAAX,EAAA,MAAAJ,GAAW,SAAS,EAAI,GACxBI,EAAA,MAAAL,GAAS,SAAS,EAAK;AAAA,EAEhC;AACJ;AA1FIJ,IAAA,eAgBAC,IAAA,eAGAC,IAAA,eAGAC,IAAA,eAGAC,IAAA,eAGAC,IAAA,eAGAC,IAAA;AA+DG,MAAMM,IACT,IAAIY,EAAuC5B,EAAsB,IAAI;"}